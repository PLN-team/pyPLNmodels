---
title: "Temporal count data"
date: "2025-03-27"
format:
  html:
    embed-resources: true
    css: styles.css
    toc: true
    toc-location: left
bibliography: bib.bib
bibliographystyle: apa
execute:
  cache: true
nocite: |
  @joss_bastien
---

# Introduction

The Poisson lognormal (PLN) model can be extended to capture temporal or spatial dependencies by structuring the latent space. This leads to the `PlnAR` (PLN autoregressive) model, where an autocorrelation matrix $\Phi$ encodes how latent variables evolve across time (or space).

Depending on the desired complexity, several types of autocorrelation structures for $\Phi$ can be used:

- `full`: Each variable depends on all others ($\Phi$ is a full matrix).
- `diagonal`: Each variable follows its own independent temporal dynamics ($\Phi$ is diagonal).
- `spherical`: All variables share a common temporal pattern ($\Phi$ is a scalar multiple of the identity).

## Statistical background

The mathematical model is given by:

$$
\begin{align}
Z_{i} & \sim \mathcal{N}(o_i + X_i^{\top} B, \Sigma)\\
Z_{i}|Z_{i-1} &  \sim \Phi Z_{i-1} + \mathcal{N}(\mu^{\epsilon}_i, \Sigma^{\epsilon}) \\
Y_{ij} \mid Z_{ij} &\sim \mathcal{P}(\exp(Z_{ij})),
\end{align}
$$

with:

- $\mu^{\epsilon}_i = \mu_i - \Phi \mu_{i-1}$
- $\Sigma^{\epsilon} = \Sigma - \Phi \Sigma \Phi$
- $\mu_i = X_i^{\top} B$
- $\Phi \in \mathcal{S}^{p}_+$

The matrix $\Phi$ is constrained such that $\Sigma^{\epsilon}$ remains positive definite.

## Purpose

The `PlnAR` package provides tools to analyze dependencies between consecutive time points or spatial sites by estimating the autoregression matrix $\Phi$.

# Data

We illustrate the package using the **crossover** dataset, which contains recombination patterns in sheep over time. This dataset captures male meiotic recombination maps for the Lacaune breed, combining historical data from Lacaune and Soay sheep.

```{python}
from pyPLNmodels import load_crossover
data = load_crossover(chromosome_numbers=[1, 5, 8])
print('Data: ', data.keys())
```

## Endogenous variables

```{python}
print(data["endog"].head())
```

The dataset also includes chromosome identifiers:

```{python}
print(data["chrom"].unique())
```

# Model Initialization and Fitting

We start by fitting a model with a **diagonal** autoregressive structure:

```{python}
from pyPLNmodels import PlnAR
ar_diag = PlnAR.from_formula("endog ~ 1", data=data, ar_type="diagonal").fit()
```

For more information on how to include covariates and offsets, see the [dedicated tutorial](??).

Note: A diagonal $\Phi$ implies a diagonal covariance structure $\Sigma$.

# Temporal structure

```{python}
ar_diag.show()
```

The output indicates, for instance, that the variable `nco_Soay_F` depends
approximately 80% on its past values (see the graph on the bottom left).

# Latent variables and visualization

To explore latent dynamics, extract the latent variables $Z$:

```{python}
z = ar_diag.latent_variables
```

Visualize the temporal structure:

```{python}
ar_diag.viz_dims(
    column_names=["nco_Lacaune_M", "nco_Lacaune_F", "nco_Soay_F", "nco_Soay_M"],
    colors=data["chrom"]
)
```

# Full and Spherical Autoregression

Other structures for $\Phi$ include:

## Full autoregression

Each variable depends on all others (default behavior):

```{python}
ar_full = PlnAR.from_formula("endog ~ 1", data=data, ar_type="full").fit()
ar_full.show()
```

## Spherical autoregression

All variables share a common temporal trend:

```{python}
ar_spher = PlnAR.from_formula("endog ~ 1", data=data, ar_type="spherical").fit()
ar_spher.show()
```

These models generally yield similar outputs for this dataset.

# Autoregression Coefficients

Access the estimated autoregression parameters:

```{python}
print("Full autoregressive parameter:", ar_full.ar_coef.shape)
print("Diagonal autoregressive parameter:", ar_diag.ar_coef.shape)
print("Spherical autoregressive parameter:", ar_spher.ar_coef.shape)
```

---

This concludes the introduction to temporal modeling with the `PlnAR` package. For further examples and diagnostics, see the advanced tutorials.
