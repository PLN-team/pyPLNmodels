---
title: "Multivariate count data analysis with `pyPLNmodels`"
date: "2025-03-27"
# format: html
format:
    html:
        embed-resources: true
---


In this tutorial, we will explore the fundamentals of multivariate count data analysis using the
`pyPLNmodels` package. This package includes two primary models for this purpose:

* `Pln` model ([documentation](https://pln-team.github.io/pyPLNmodels/pln.html))
* `PlnPCA` model ([documentation](https://pln-team.github.io/pyPLNmodels/plnpca.html))

The `PlnPCA` model performs a similar function to the `Pln` model but is designed to
handle high-dimensional data, albeit with a slight compromise in parameter estimation accuracy.


# Statistical background

Given a count matrix $Y$, each model assumes the following:

$$ Y_{ij}| Z_{ij} \sim \mathcal P(\exp(Z_{ij})), \quad Z_{i}\sim \mathcal N(o_i + X_i^{\top} B, \Sigma),$$
with input data

* $Y_{ij}$ (denoted `endog` in the package) is the $j$-th count for the $i$-th observation
* $X_i$ (denoted `exog`) covariates for the $i$-th observation (if available)
* $o_i$ (denoted `offsets`) offset for the $i$-th observation (if available)

and model parameters

* $B$ (denoted `coef` in the package) is a matrix of regression coefficients
* $\Sigma$ (denoted `covariance` in the package) is the covariance matrix of the latent variables $Z_i$


The `Pln` model assumes that $\Sigma$ has full rank, whereas the `PlnPCA` model
assumes that $\Sigma$ has a low rank, which must be specified by the user. A
lower rank results in a greater compromise in parameter estimation.


### Role

The role of the `pyPLNmodels` package is to

* estimate the parameters $B$ and
$\Sigma$
* retrieving the latent variables $Z$
using the input matrix $Y$ and, if available, the covariate matrix $X$ (defaults to a vector of 1's) and offsets $O$ (defaults to a matrix of 0's).


# Data importation

In this tutorial, we will analyze single-cell RNA-seq data available through
the `load_scrna` function of the package. In this dataset, each column
represents a gene, and each row (i.e., individual) represents a cell.
Covariates corresponding to the cell type (`labels`) are also available. For
visualization purposes, we will consider only 20 variables (i.e., dimensions).

```{python}
from pyPLNmodels import load_scrna
rna = load_scrna(dim = 20)
print('Data: ', rna.keys())
```

## Data structure

### Count matrix  (`endog`)

```{python}
endog = rna["endog"]
print(endog.head())
```

### Cell type

```{python}
cell_type = rna["labels"]
print('Possible cell types: ', cell_type.unique())
print(cell_type.head())
```


# Model intialization and fitting


We aim to analyze the mean values for each cell type. The following method uses
cell type as covariates, with `Macrophages` serving as the reference value:

```{python}
from pyPLNmodels import Pln
pln = Pln.from_formula('endog ~ 1 + labels', data=rna).fit()
```

For additional details on the formula syntax and model initialization, including how to account for offsets, please refer to the relevant documentation.

Printing the model gives useful information about the model:

```{python}
print(pln)
```
The `.show()` method provides valuable insights into the parameters and the optimization process:

```{python}
pln.show()
```

# Visualizing Latent Variables

The latent variables \(Z\) can be accessed via the `latent_variables` attribute:

```{python}
Z = pln.latent_variables
print('Shape of Z:', Z.shape)
```

Several methods can be used to visualize these variables:

```{python}
pln.viz(colors=cell_type)
```

To remove the effect of covariates, use the `remove_exog_effect` parameter in
the `.viz` method (effectively visualizing the `latent_positions`, corresponding to $Z - XB$):

```{python}
pln.viz(colors=cell_type, remove_exog_effect=True)
```

A pair plot of the first Principal Components (PCs) of the latent variables can be generated with:

```{python}
pln.pca_pairplot(n_components=4, colors=cell_type)
```

---

# Covariate Effects

The model highlights that the mean value for Macrophages cells is higher than for T_cells_CD4+ and T_cells_CD8+.

### Confidence Intervals and p-values

A summary of the model, including confidence intervals and p-values, can be obtained using the `summary` method:

```{python}
pln.summary()
```

Confidence intervals can be visualized using the `plot_regression_forest` method:

```{python}
pln.plot_regression_forest()
```

---

# Covariance and variable visualization

The effect of each variable can be analyzed using the `plot_correlation_circle()` and `biplot()` methods.

### Correlation Circle

```{python}
pln.plot_correlation_circle(column_names=["FTL", "MALAT1", "FTH1"])
```

### Biplot

The `.biplot()` method allows simultaneous visualization of variables and latent variables ($Z$):

```{python}
pln.biplot(column_names=["FTL", "MALAT1", "FTH1"], colors=cell_type)
```

---

# `PlnPCA` Model

The `PlnPCA` model can be used in the same way as the `Pln` model, with the same syntax:

```{python}
from pyPLNmodels import PlnPCA
high_d_rna = load_scrna(dim = 1000)
pca = PlnPCA.from_formula('endog ~ 1 + labels', data=high_d_rna, rank=5).fit()
```
Note that p-values are not available in the `PlnPCA` model.

This model is particularly useful for high-dimensional data, as its computation time is significantly lower than that of `Pln`.

```{python}
print(pca)
```

The number of ranks is an hyperparameter that can be user-defined. A more data-driven approach to selecting the rank can be achieved using the `PlnPCACollection` class:

```{python}
from pyPLNmodels import PlnPCACollection
pcas = PlnPCACollection.from_formula('endog ~ 1 + labels', data=high_d_rna, ranks=[2,3,5, 10, 15]).fit()
```

Calling `.show()` on the collection gives some insights on which rank to choose:

```{python}
pcas.show()
```

The collection clearly indicates that a rank of 2 is the most appropriate for this dataset.
