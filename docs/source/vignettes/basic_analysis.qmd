---
title: "Multivariate count data analysis with `pyPLNmodels`"
date: "2025-03-27"
# format: html
format:
    html:
        embed-resources: true
---


In this tutorial, we will explore the fundamentals of multivariate count data analysis using the
`pyPLNmodels` package. This package includes two primary models for this purpose:

* `Pln` model ([documentation](https://pln-team.github.io/pyPLNmodels/pln.html))
* `PlnPCA` model ([documentation](https://pln-team.github.io/pyPLNmodels/plnpca.html))

The `PlnPCA` model performs a similar function to the `Pln` model but is designed to
handle high-dimensional data, albeit with a slight compromise in parameter estimation accuracy.


# Statistical background

Given a count matrix $Y$, each model assumes the following:

$$ Y_{ij}| Z_{ij} \sim \mathcal P(\exp(Z_{ij})), \quad Z_{i}\sim \mathcal N(o_i + X_i^{\top} B, \Sigma),$$
with input data

* $Y_{ij}$ (denoted `endog`) is the $j$-th count for the $i$-th observation
* $X_i$ (denoted `exog` in the package) covariates for the $i$-th observation (if available)
* $o_i$ (denoted `offsets`) offset for the $i$-th observation (if available)

and model parameters

* $B$ (denoted `coef` in the package) is a matrix of regression coefficients
* $\Sigma$ (denoted `covariance` in the package) is the covariance matrix of the latent variables $Z_i$

  The `Pln` model assumes that $\Sigma$ has full
  rank, whereas the `PlnPCA` model assumes that
  $\Sigma$ has a low rank, which must be
  specified by the user. A lower rank results in
  a greater compromise in parameter estimation.

### Role

The role of the `pyPLNmodels` package is to estimate the parameters $B$ and
$\Sigma$ using the input matrix $Y$ and, if available, the covariate matrix $X$ and offsets $O$.


# Data importation

In this tutorial, we will analyse single-cell RNA-seq data available in the
`load_scrna` function of the package. In this dataset, each column corresponds to
a gene, and each row (i.e. individual) corresponds to a cell. Covariates are
available, corresponding to the cell type (`labels`). For visualization
purposes, we will take only 20 variables (i.e. dimensions).

```{python}
from pyPLNmodels import load_scrna
rna = load_scrna(dim = 20)
print('Data: ', rna.keys())
```

## Data structure

### Count matrix  (`endog`)

```{python}
endog = rna["endog"]
print(endog.head())
```

### Cell type

```{python}
cell_type = rna["labels"]
print('Possible cell types: ', cell_type.unique())
print(cell_type.head())
```


## Model intialization and fitting


We aim to analyze the mean values for each cell type. The following method uses
cell type as covariates, with the `Macrophages` correspond to the reference value:

```{python}
from pyPLNmodels import Pln
pln = Pln.from_formula('endog ~ 1 + labels', data=rna).fit()
```

### Retrieving latent variables

The latent variables can be retrieved using the `latent_variables` attribute:


```{python}
Z = pln.latent_variables
print('Shape', Z.shape)
```

Printing the model gives useful information about the model:
```{python}
print(pln)
```
and the `.show()` gives some insightful information:
```{python}
pln.show(figsize=(10, 5))
```
# Visualizing latent variables

The latent variables may be visualized across multiple methods:
```{python}
pln.viz(colors = cell_type)
```
The effect of covariates may be removed, using the `remove_exog_effet` keyword
of the `.viz` method (effectively visualizing the `latent_positions`):
```{python}
pln.viz(colors = cell_type, remove_exog_effect=True)
```

A pair plot of the first Principal Components (PCs) of the latent variables may be visualized:

```{python}
pln.pca_pairplot(n_components = 4, colors = cell_type)
```



# Covariates effect

The model clearly shows that the mean values of the macrophages cells is higher
than the T_cells_CD4+ and T_cells_CD8+ means.

#### Confidence intervals and p-values

A summary of the model, giving confidence interval and p-values, is available using the `summary` method:

```{python}
pln.summary()
```
Visualizing the confidence intervals can be done using the `plot_regression_forest` method:
```{python}
pln.plot_regression_forest()
```
# Covariance visualization

The effect of each variable may be visualized using the   `plot_correlation_circle()` and `.biplot()` methods:

#### Correlation circle

```{python}
pln.plot_correlation_circle(column_names = ["FTL", "MALAT1","FTH1"])
```

```{python}
pln.plot_correlation_circle(column_names = ["FTL", "MALAT1","FTH1"], colors = cell_type)
```
#### Biplot
```{python}
pln.biplot(column_names = ["FTL", "MALAT1","FTH1"], colors = cell_type)
```



## Accounting for offsets








## Section 1

Working fine.

### Subsection 1.1

Content for the first subsection.

## Section 2

Content for the second section.

# Conclusion

Write your conclusion here.
